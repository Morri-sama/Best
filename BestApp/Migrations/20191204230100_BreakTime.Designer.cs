// <auto-generated />
using System;
using BestApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BestApp.Migrations
{
    [DbContext(typeof(BestDbContext))]
    [Migration("20191204230100_BreakTime")]
    partial class BreakTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.AgeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.ToTable("AgeCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "От 3 до 5 лет",
                            Priority = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "От 6 до 7 лет",
                            Priority = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "От 8 до 10 лет",
                            Priority = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "От 11 до 13 лет",
                            Priority = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "От 14 до 16 лет",
                            Priority = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "От 17 до 23 лет",
                            Priority = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "От 24 лет и старше",
                            Priority = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Смешанная группа",
                            Priority = 8
                        });
                });

            modelBuilder.Entity("Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgeCategoryId");

                    b.Property<string>("City");

                    b.Property<int>("CompetitionId");

                    b.Property<string>("ParticipantEmail");

                    b.Property<string>("ParticipantFullName");

                    b.Property<string>("ParticipantPhoneNumber");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("AgeCategoryId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Models.BreakTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompetitionId");

                    b.Property<DateTime>("End");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("BreakTime");
                });

            modelBuilder.Entity("Models.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<int>("DiplomaNumber");

                    b.Property<int>("DiplomaNumberDigits");

                    b.Property<bool>("IsClosed");

                    b.Property<int>("LastDiplomaNumber");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Models.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformation");

                    b.Property<int>("ApplicationId");

                    b.Property<int>("ApproximateTime");

                    b.Property<string>("Composer");

                    b.Property<string>("Composition");

                    b.Property<string>("DiplomaNumber");

                    b.Property<int?>("GradeId");

                    b.Property<int?>("NominationId");

                    b.Property<int>("PeopleAmount");

                    b.Property<DateTime>("PerfomanceTime");

                    b.Property<int?>("SubnominationId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("GradeId");

                    b.HasIndex("NominationId");

                    b.HasIndex("SubnominationId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Models.Nomination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.ToTable("Nominations");
                });

            modelBuilder.Entity("Models.NominationAdditionalField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCustomValueAllowed");

                    b.Property<bool>("IsPrinted");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NominationId");

                    b.HasKey("Id");

                    b.HasIndex("NominationId");

                    b.ToTable("NominationAdditionalFields");
                });

            modelBuilder.Entity("Models.NominationAdditionalFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContestId");

                    b.Property<int>("NominationAdditionalFieldId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("NominationAdditionalFieldId");

                    b.ToTable("NominationAdditionalFieldValues");
                });

            modelBuilder.Entity("Models.NominationAdditionalFieldValueOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NominationAdditionalFieldId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NominationAdditionalFieldId");

                    b.ToTable("NominationAdditionalFieldValueOptions");
                });

            modelBuilder.Entity("Models.Subnomination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NominationId");

                    b.HasKey("Id");

                    b.HasIndex("NominationId");

                    b.ToTable("Subnominations");
                });

            modelBuilder.Entity("Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("TeacherTypeId");

                    b.HasKey("Id");

                    b.HasIndex("TeacherTypeId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Models.TeacherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TeacherTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Педагог"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Преподаватель"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Руководитель"
                        });
                });

            modelBuilder.Entity("Models.Application", b =>
                {
                    b.HasOne("Models.AgeCategory", "AgeCategory")
                        .WithMany()
                        .HasForeignKey("AgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Competition", "Competition")
                        .WithMany("Applications")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.BreakTime", b =>
                {
                    b.HasOne("Models.Competition", "Competition")
                        .WithMany("BreakTimes")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Contest", b =>
                {
                    b.HasOne("Models.Application", "Application")
                        .WithMany("Contests")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Grade", "Grade")
                        .WithMany("Contests")
                        .HasForeignKey("GradeId");

                    b.HasOne("Models.Nomination", "Nomination")
                        .WithMany()
                        .HasForeignKey("NominationId");

                    b.HasOne("Models.Subnomination", "Subnomination")
                        .WithMany()
                        .HasForeignKey("SubnominationId");
                });

            modelBuilder.Entity("Models.NominationAdditionalField", b =>
                {
                    b.HasOne("Models.Nomination", "Nomination")
                        .WithMany("NominationAdditionalFields")
                        .HasForeignKey("NominationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.NominationAdditionalFieldValue", b =>
                {
                    b.HasOne("Models.Contest", "Contest")
                        .WithMany("NominationAdditionalFieldValues")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.NominationAdditionalField", "NominationAdditionalField")
                        .WithMany()
                        .HasForeignKey("NominationAdditionalFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.NominationAdditionalFieldValueOption", b =>
                {
                    b.HasOne("Models.NominationAdditionalField", "NominationAdditionalField")
                        .WithMany("NominationAdditionalFieldValueOptions")
                        .HasForeignKey("NominationAdditionalFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Subnomination", b =>
                {
                    b.HasOne("Models.Nomination", "Nomination")
                        .WithMany("Subnominations")
                        .HasForeignKey("NominationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Teacher", b =>
                {
                    b.HasOne("Models.TeacherType", "TeacherType")
                        .WithMany()
                        .HasForeignKey("TeacherTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
